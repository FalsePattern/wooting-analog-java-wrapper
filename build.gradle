plugins {
    id 'java'
    id "io.github.tomtzook.gradle-cmake" version "1.0.0"
    id "com.palantir.git-version" version "0.12.3"
    id "maven-publish"
}

group 'com.github.botn365'

try {
    version = gitVersion()
}
catch (ignored) {
    throw new IllegalStateException("This mod must be version controlled by Git AND the repository must provide at least one tag!")
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-codec:commons-codec:1.5'
}

task generateJniHeaders(type:Exec) {
    def classpath = "src/main/java"
    def cls = "com.github.botn365.main.WootingAnalogWrapper"
    commandLine "javah", "-o", "native/wrapperglue/glue.h", "-classpath", classpath, cls
    dependsOn classes
}

def compileMachineTargets = [machines.host]
if (System.properties['os.name'].toLowerCase().contains('linux')) {
    if (project.hasProperty("windows")) {
        machines.customMachines.register("windows x86_64") {
            it.toolchainFile.set(project.file("native/cmake-toolchain/windows.cmake"))
        }
    }
    if (project.hasProperty("apple")) {
        machines.customMachines.register("apple x86_64") {
            it.toolchainFile.set(project.file("native/cmake-toolchain/apple-x86_64.cmake"))
        }
        machines.customMachines.register("apple arm64") {
            it.toolchainFile.set(project.file("native/cmake-toolchain/apple-arm64.cmake"))
        }
    }
    compileMachineTargets.addAll(machines.customMachines)
}

cmake {
    targets {
        nativeGlue {
            cmakeLists.set(file("native/CMakeLists.txt"))
            targetMachines.addAll(compileMachineTargets)
        }
    }
}

tasks.clean.dependsOn tasks.cmakeClean
tasks.processResources.dependsOn tasks.cmakeBuild

def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" )
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    try {
        def entries = getMavenSettingsCredentials()
        for (entry in entries) {
            if (entry."id".text() == repositoryName) {
                return [username: entry.username.text(), password: entry.password.text()]
            }
        }
    } catch (Exception ignored) {
        return [username: "none", password: "none"]
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: jar
            groupId = mavenGroupId
            artifactId = mavenArtifactId
            version = gitVersion(null)
        }
    }

    repositories {
        maven {
            name = repositoryName
            url = repositoryURL
            allowInsecureProtocol = true
            def creds = getCredentials()
            credentials {
                username = creds == null ? "none" : creds.username
                password = creds == null ? "none" : creds.password
            }
        }
    }
}